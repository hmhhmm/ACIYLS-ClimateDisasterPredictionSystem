import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart' as gmaps;
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter_map/flutter_map.dart' as fmap;
import 'package:latlong2/latlong.dart' as latlong;
import 'package:flutter_map_cancellable_tile_provider/flutter_map_cancellable_tile_provider.dart';
import 'dart:math' as math;
import '../widgets/heat_map_layer.dart';

class WeatherColors {
  static const primary = Color(0xFF1565C0);
  static const secondary = Color(0xFF64B5F6);
  static const accent = Color(0xFFFFA726);
  static const background = Color(0xFFF5F5F5);
  static const cardBg = Color(0xFFFFFFFF);
  static const textPrimary = Color(0xFF2C3E50);
  static const textSecondary = Color(0xFF7F8C8D);
  static const success = Color(0xFF2ECC71);
  static const warning = Color(0xFFE67E22);
  static const error = Color(0xFFE74C3C);
  
  static final gradientBlue = [
    Color(0xFF1565C0),
    Color(0xFF1976D2),
    Color(0xFF2196F3),
  ];
  
  static final windColors = [
    Color(0xFF90CAF9), // Light wind
    Color(0xFF42A5F5), // Moderate wind
    Color(0xFF1E88E5), // Strong wind
    Color(0xFF1565C0), // Very strong wind
  ];
}

class WaterSourceMapScreen extends StatefulWidget {
  const WaterSourceMapScreen({super.key});

  @override
  State<WaterSourceMapScreen> createState() => _WaterSourceMapScreenState();
}

class WindArrowPainter extends CustomPainter {
  final double angle;
  final Color color;
  final double strength;

  WindArrowPainter({
    required this.angle,
    required this.color,
    required this.strength,
  });

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = color
      ..style = PaintingStyle.fill
      ..strokeWidth = 2.0;

    canvas.save();
    canvas.translate(size.width / 2, size.height / 2);
    canvas.rotate(angle);

    final path = Path();
    path.moveTo(0, -size.height / 2 * strength);
    path.lineTo(size.width / 4 * strength, 0);
    path.lineTo(-size.width / 4 * strength, 0);
    path.close();
    
    path.moveTo(size.width / 8 * strength, 0);
    path.lineTo(-size.width / 8 * strength, 0);
    path.lineTo(-size.width / 8 * strength, size.height / 2 * strength);
    path.lineTo(size.width / 8 * strength, size.height / 2 * strength);
    path.close();

    canvas.drawPath(path, paint);
    canvas.restore();
  }

  @override
  bool shouldRepaint(WindArrowPainter oldDelegate) =>
      angle != oldDelegate.angle ||
      color != oldDelegate.color ||
      strength != oldDelegate.strength;
}

class _WeatherCard extends StatelessWidget {
  final String title;
  final Widget child;

  const _WeatherCard({
    Key? key,
    required this.title,
    required this.child,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: WeatherColors.cardBg,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: WeatherColors.primary,
            ),
          ),
          SizedBox(height: 8),
          child,
        ],
      ),
    );
  }
}

class _WeatherInfoItem extends StatelessWidget {
  final IconData icon;
  final String value;
  final String label;
  final Color color;

  const _WeatherInfoItem({
    required this.icon,
    required this.value,
    required this.label,
    required this.color,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Icon(icon, color: color),
        const SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            color: WeatherColors.textPrimary,
            fontSize: 14,
          ),
        ),
        Text(
          label,
          style: TextStyle(
            color: WeatherColors.textSecondary,
            fontSize: 12,
          ),
        ),
      ],
    );
  }
}

class _WaterSourceMapScreenState extends State<WaterSourceMapScreen> {
  final List<Map<String, dynamic>> _weatherData = [
    {
      'location': 'Tokyo',
      'temperature': 34,
      'condition': 'Mostly Sunny',
      'lat': 35.6762,
      'lng': 139.6503,
      'windDirection': 225.0,
      'windSpeed': 20.0,
      'humidity': 65,
      'aqi': 20,
    },
    {
      'location': 'Yokohama',
      'temperature': 33,
      'condition': 'Sunny',
      'lat': 35.4437,
      'lng': 139.6380,
      'windDirection': 220.0,
      'windSpeed': 18.0,
      'humidity': 68,
      'aqi': 22,
    },
    {
      'location': 'Kawasaki',
      'temperature': 33,
      'condition': 'Clear',
      'lat': 35.5308,
      'lng': 139.7029,
      'windDirection': 215.0,
      'windSpeed': 17.0,
      'humidity': 70,
      'aqi': 25,
    }
  ];

  final List<Map<String, dynamic>> _heatmapData = [
    {'lat': 35.6762, 'lng': 139.6503, 'intensity': 0.9}, // Tokyo
    {'lat': 35.4437, 'lng': 139.6380, 'intensity': 0.8}, // Yokohama
    {'lat': 35.5308, 'lng': 139.7029, 'intensity': 0.7}, // Kawasaki
    {'lat': 35.6938, 'lng': 139.7034, 'intensity': 0.6}, // Ueno
    {'lat': 35.6586, 'lng': 139.7454, 'intensity': 0.5}, // Koto
  ];

  final Map<String, bool> _layers = {
    'heatmap': true,
    'wind': true,
    'markers': true,
  };

  Set<gmaps.Marker> get _weatherMarkers {
    return _weatherData.map((data) {
      return gmaps.Marker(
        markerId: gmaps.MarkerId(data['location']),
        position: gmaps.LatLng(data['lat'], data['lng']),
        infoWindow: gmaps.InfoWindow(
          title: '${data['location']} - ${data['temperature']}°C',
          snippet: '${data['condition']}\nWind: ${data['windSpeed']} km/h',
        ),
      );
    }).toSet();
  }

  List<fmap.Marker> get _webMarkers {
    return _weatherData.map((data) {
      final windSpeed = data['windSpeed'] as double;
      final windColor = windSpeed < 5 
          ? WeatherColors.windColors[0]
          : windSpeed < 10 
              ? WeatherColors.windColors[1]
              : windSpeed < 15 
                  ? WeatherColors.windColors[2]
                  : WeatherColors.windColors[3];
      
      return fmap.Marker(
        width: 140.0,
        height: 100.0,
        point: latlong.LatLng(data['lat'], data['lng']),
        child: Column(
          children: [
            CustomPaint(
              size: Size(40, 40),
              painter: WindArrowPainter(
                angle: (data['windDirection'] * math.pi / 180) - math.pi / 2,
                color: windColor,
                strength: (windSpeed / 20).clamp(0.3, 1.0),
              ),
            ),
            Container(
              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 6),
              decoration: BoxDecoration(
                color: WeatherColors.cardBg.withOpacity(0.9),
                borderRadius: BorderRadius.circular(8),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 4,
                    offset: Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                children: [
                  Text(
                    '${data['temperature']}°C',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      color: WeatherColors.textPrimary,
                      fontSize: 16,
                    ),
                  ),
                  Text(
                    data['condition'],
                    style: TextStyle(
                      color: WeatherColors.textSecondary,
                      fontSize: 12,
                    ),
                  ),
                  Text(
                    '${data['windSpeed']} km/h',
                    style: TextStyle(
                      color: windColor,
                      fontWeight: FontWeight.w500,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      );
    }).toList();
  }

  @override
  Widget build(BuildContext context) {
    final weatherData = _weatherData[0];
    
    return Scaffold(
      backgroundColor: WeatherColors.background,
      body: SafeArea(
        child: CustomScrollView(
          slivers: <Widget>[
            SliverAppBar(
              expandedHeight: 200,
              floating: false,
              pinned: true,
              backgroundColor: WeatherColors.primary,
              flexibleSpace: FlexibleSpaceBar(
                background: Container(
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      begin: Alignment.topCenter,
                      end: Alignment.bottomCenter,
                      colors: WeatherColors.gradientBlue,
                    ),
                  ),
                  child: SafeArea(
                    child: Stack(
                      children: [
                        Positioned(
                          top: 16,
                          right: 16,
                          child: Container(
                            padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                            decoration: BoxDecoration(
                              color: Colors.black.withOpacity(0.2),
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Row(
                              children: [
                                Icon(Icons.signal_cellular_alt, color: Colors.white, size: 16),
                                SizedBox(width: 4),
                                Text(
                                  '5G',
                                  style: TextStyle(color: Colors.white, fontSize: 14),
                                ),
                              ],
                            ),
                          ),
                        ),
                        Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                weatherData['location'],
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 36,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Text(
                                    '${weatherData['temperature']}°',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 48,
                                      fontWeight: FontWeight.w300,
                                    ),
                                  ),
                                  Text(
                                    ' | ${weatherData['condition']}',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 20,
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
            SliverToBoxAdapter(
              child: Column(
                children: <Widget>[
                  _WeatherCard(
                    title: 'AIR QUALITY',
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        _WeatherInfoItem(
                          icon: Icons.eco,
                          value: '${weatherData['aqi']}',
                          label: 'AQI',
                          color: WeatherColors.success,
                        ),
                        _WeatherInfoItem(
                          icon: Icons.air,
                          value: '8.2 μg/m³',
                          label: 'PM2.5',
                          color: WeatherColors.success,
                        ),
                        _WeatherInfoItem(
                          icon: Icons.air_outlined,
                          value: '15.4 μg/m³',
                          label: 'PM10',
                          color: WeatherColors.success,
                        ),
                      ],
                    ),
                  ),
                  _WeatherCard(
                    title: 'WIND MAP',
                    child: Column(
                      children: [
                        Padding(
                          padding: EdgeInsets.symmetric(horizontal: 16),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                            children: [
                              FilterChip(
                                label: const Text('Heatmap'),
                                selected: _layers['heatmap']!,
                                onSelected: (val) => setState(() => _layers['heatmap'] = val),
                                selectedColor: WeatherColors.accent.withOpacity(0.2),
                              ),
                              FilterChip(
                                label: const Text('Wind'),
                                selected: _layers['wind']!,
                                onSelected: (val) => setState(() => _layers['wind'] = val),
                                selectedColor: WeatherColors.primary.withOpacity(0.2),
                              ),
                              FilterChip(
                                label: const Text('Markers'),
                                selected: _layers['markers']!,
                                onSelected: (val) => setState(() => _layers['markers'] = val),
                                selectedColor: WeatherColors.success.withOpacity(0.2),
                              ),
                            ],
                          ),
                        ),
                        SizedBox(height: 8),
                        Container(
                          height: 300,
                          margin: EdgeInsets.symmetric(horizontal: 16),
                          child: ClipRRect(
                            borderRadius: BorderRadius.circular(20),
                            child: kIsWeb
                                ? fmap.FlutterMap(
                                    options: fmap.MapOptions(
                                      center: latlong.LatLng(weatherData['lat'], weatherData['lng']),
                                      zoom: 11.5,
                                      maxZoom: 18,
                                      minZoom: 8,
                                    ),
                                    children: [
                                      fmap.TileLayer(
                                        urlTemplate:
                                            'https://tile.openstreetmap.org/{z}/{x}/{y}.png',
                                        tileProvider: kIsWeb
                                            ? CancellableNetworkTileProvider()
                                            : null,
                                      ),
                                      if (_layers['heatmap']!)
                                        HeatMapLayer(
                                          heatMapDataPoints: _heatmapData
                                              .map((point) => HeatMapPoint(
                                                    latLng: latlong.LatLng(
                                                        point['lat'], point['lng']),
                                                    intensity: point['intensity'],
                                                  ))
                                              .toList(),
                                          color: WeatherColors.accent,
                                          radius: 30,
                                          blur: 20,
                                        ),
                                      if (_layers['markers']!)
                                        fmap.MarkerLayer(markers: _webMarkers),
                                    ],
                                  )
                                : gmaps.GoogleMap(
                                    initialCameraPosition: gmaps.CameraPosition(
                                      target: gmaps.LatLng(
                                          weatherData['lat'], weatherData['lng']),
                                      zoom: 11.5,
                                    ),
                                    markers: _weatherMarkers,
                                    myLocationButtonEnabled: false,
                                    zoomControlsEnabled: true,
                                  ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  _WeatherCard(
                    title: 'AVERAGES',
                    child: Column(
                      children: [
                        Row(
                          children: [
                            Text(
                              '+6°',
                              style: TextStyle(
                                fontSize: 48,
                                fontWeight: FontWeight.bold,
                                color: WeatherColors.accent,
                              ),
                            ),
                            SizedBox(width: 16),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    'above average',
                                    style: TextStyle(
                                      fontSize: 18,
                                      color: WeatherColors.textSecondary,
                                    ),
                                  ),
                                  Text(
                                    'daily high',
                                    style: TextStyle(
                                      fontSize: 18,
                                      color: WeatherColors.textSecondary,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        SizedBox(height: 16),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  'Today',
                                  style: TextStyle(
                                    color: WeatherColors.primary,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                                Text(
                                  'Average',
                                  style: TextStyle(
                                    color: WeatherColors.primary,
                                    fontWeight: FontWeight.w500,
                                  ),
                                ),
                              ],
                            ),
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.end,
                              children: [
                                Text(
                                  'H:35°',
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: WeatherColors.textPrimary,
                                  ),
                                ),
                                Text(
                                  'H:29°',
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    color: WeatherColors.textPrimary,
                                  ),
                                ),
                              ],
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  _WeatherCard(
                    title: 'FEELS LIKE',
                    child: Row(
                      children: [
                        Text(
                          '35°',
                          style: TextStyle(
                            fontSize: 48,
                            fontWeight: FontWeight.bold,
                            color: WeatherColors.textPrimary,
                          ),
                        ),
                        SizedBox(width: 16),
                        Expanded(
                          child: Text(
                            'It feels hotter than the actual temperature.',
                            style: TextStyle(
                              fontSize: 16,
                              color: WeatherColors.textSecondary,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  SizedBox(height: 16),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}
